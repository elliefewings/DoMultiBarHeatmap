{
    "collab_server" : "",
    "contents" : "suppressPackageStartupMessages({\n  library(rlang)\n})\n\nDoMultiBarHeatmap <- function (object, \n                               features = NULL, \n                               cells = NULL, \n                               group.by = \"ident\", \n                               additional.group.by = NULL, \n                               group.bar = TRUE, \n                               disp.min = -2.5, \n                               disp.max = NULL, \n                               slot = \"scale.data\", \n                               assay = NULL, \n                               label = TRUE, \n                               size = 5.5, \n                               hjust = 0, \n                               angle = 45, \n                               raster = TRUE, \n                               draw.lines = TRUE, \n                               lines.width = NULL, \n                               group.bar.height = 0.02, \n                               combine = TRUE) \n{\n  cells <- cells %||% colnames(x = object)\n  if (is.numeric(x = cells)) {\n    cells <- colnames(x = object)[cells]\n  }\n  assay <- assay %||% DefaultAssay(object = object)\n  DefaultAssay(object = object) <- assay\n  features <- features %||% VariableFeatures(object = object)\n  ## Why reverse???\n  features <- rev(x = unique(x = features))\n  disp.max <- disp.max %||% ifelse(test = slot == \"scale.data\", \n                                   yes = 2.5, no = 6)\n  possible.features <- rownames(x = GetAssayData(object = object, \n                                                 slot = slot))\n  if (any(!features %in% possible.features)) {\n    bad.features <- features[!features %in% possible.features]\n    features <- features[features %in% possible.features]\n    if (length(x = features) == 0) {\n      stop(\"No requested features found in the \", slot, \n           \" slot for the \", assay, \" assay.\")\n    }\n    warning(\"The following features were omitted as they were not found in the \", \n            slot, \" slot for the \", assay, \" assay: \", paste(bad.features, \n                                                             collapse = \", \"))\n  }\n  data <- as.data.frame(x = as.matrix(x = t(x = GetAssayData(object = object, \n                                                             slot = slot)[features, cells, drop = FALSE])))\n  \n  object <- suppressMessages(expr = StashIdent(object = object, \n                                               save.name = \"ident\"))\n  group.by <- group.by %||% \"ident\"\n  groups.use <- object[[c(group.by, additional.group.by)]][cells, , drop = FALSE]\n  plots <- list()\n  for (i in group.by) {\n    data.group <- data\n    group.use <- groups.use[, c(i, additional.group.by), drop = FALSE]\n    \n    for(colname in colnames(group.use)){\n      if (!is.factor(x = group.use[[colname]])) {\n        group.use[[colname]] <- factor(x = group.use[[colname]])\n      }  \n    }\n    \n    if (draw.lines) {\n      lines.width <- lines.width %||% ceiling(x = nrow(x = data.group) * \n                                                0.0025)\n      placeholder.cells <- sapply(X = 1:(length(x = levels(x = group.use[[i]])) * \n                                           lines.width), FUN = function(x) {\n                                             return(Seurat:::RandomName(length = 20))\n                                           })\n      placeholder.groups <- data.frame(foo=rep(x = levels(x = group.use[[i]]), times = lines.width))\n      placeholder.groups[additional.group.by] = NA\n      colnames(placeholder.groups) <- colnames(group.use)\n      rownames(placeholder.groups) <- placeholder.cells\n      \n      group.levels <- levels(x = group.use[[i]])\n      \n      group.use <- sapply(group.use, as.vector)\n      rownames(x = group.use) <- cells\n      \n      group.use <- rbind(group.use, placeholder.groups)\n      \n      na.data.group <- matrix(data = NA, nrow = length(x = placeholder.cells), \n                              ncol = ncol(x = data.group), dimnames = list(placeholder.cells, \n                                                                           colnames(x = data.group)))\n      data.group <- rbind(data.group, na.data.group)\n    }\n    \n    #group.use = group.use[order(group.use[[i]]), , drop=F]\n    group.use <- group.use[with(group.use, eval(parse(text=paste('order(', paste(c(i, additional.group.by), collapse=', '), ')', sep='')))), , drop=F]\n    \n    plot <- Seurat:::SingleRasterMap(data = data.group, raster = raster, \n                                     disp.min = disp.min, disp.max = disp.max, feature.order = features, \n                                     cell.order = rownames(x = group.use), group.by = group.use[[i]])\n    \n    if (group.bar) {\n      pbuild <- ggplot_build(plot = plot)\n      group.use2 <- group.use\n      cols <- list()\n      na.group <- Seurat:::RandomName(length = 20)\n      for (colname in colnames(group.use2)){\n        if (colname == group.by){\n          colid = paste0('Identity (', colname, ')')\n        } else {\n          colid = colname\n        }\n        #Create labels\n        levels(x = group.use2[[colname]]) <- unique(group.use2[[colname]])\n        if (draw.lines) {\n          levels(x = group.use2[[colname]]) <- c(levels(x = group.use2[[colname]]), na.group)  \n          group.use2[placeholder.cells, colname] <- na.group\n          cols[[colname]] <- c(scales::hue_pal()(length(x = levels(x = group.use2[[colname]]))-1), \"#FFFFFF\")\n        } else {\n          cols[[colname]] <- c(scales::hue_pal()(length(x = levels(x = group.use2[[colname]]))))\n        }\n        names(x = cols[[colname]]) <- levels(x = group.use2[[colname]])\n        \n        \n        y.range <- diff(x = pbuild$layout$panel_params[[1]]$y.range)\n        y.pos <- max(pbuild$layout$panel_params[[1]]$y.range) + y.range * 0.015\n        y.max <- y.pos + group.bar.height * y.range\n        pbuild$layout$panel_params[[1]]$y.range <- c(pbuild$layout$panel_params[[1]]$y.range[1], y.max)\n        \n        plot <- suppressMessages(plot + \n                                   annotation_raster(raster = t(x = cols[[colname]][group.use2[[colname]]]), xmin = -Inf, xmax = Inf, ymin = y.pos, ymax = y.max) + \n                                   annotation_custom(grob = grid::textGrob(label = colid, hjust = 0, gp = grid::gpar(cex = 0.75)), ymin = mean(c(y.pos, y.max)), ymax = mean(c(y.pos, y.max)), xmin = Inf, xmax = Inf) +\n                                   coord_cartesian(ylim = c(0, y.max), clip = \"off\"))\n        \n        #temp <- as.data.frame(cols[[colname]][levels(group.use[[colname]])])\n        #colnames(temp) <- 'color'\n        #temp$x <- temp$y <- 1\n        #temp[['name']] <- as.factor(rownames(temp))\n        \n        #temp <- ggplot(temp, aes(x=x, y=y, fill=name)) + geom_point(shape=21, size=5) + labs(fill=colname) + theme(legend.position = \"bottom\")\n        #legend <- get_legend(temp)\n        #multiplot(plot, legend, heights=3,1)\n        \n        if ((colname != group.by) && label) {\n          x.max <- max(pbuild$layout$panel_params[[1]]$x.range)\n          x.divs <- pbuild$layout$panel_params[[1]]$x$break_positions()\n          group.use$x <- x.divs\n          label.unique <- paste(group.use[[colname]], group.use[[group.by]], sep=\"-\")\n          label.x.pos <- tapply(X = group.use$x, INDEX = label.unique,\n                                FUN = median) * x.max\n          label.x.pos <- data.frame(group = names(x = label.x.pos), \n                                    label.x.pos)\n          label.x.pos <- label.x.pos[!grepl(\"NA\", label.x.pos$group),]\n          label.x.pos$group <- label.x.pos$group %>% lapply( function(x) gsub(\"-.*\",\"\", x))\n          plot <- plot + geom_text(stat = \"identity\", \n                                   data = label.x.pos, aes_string(label = \"group\", \n                                                                  x = \"label.x.pos\"), y = y.max + y.max * \n                                     0.03 * 0.5, angle = angle, hjust = hjust, \n                                   size = size)\n          \n          plot <- suppressMessages(plot + coord_cartesian(ylim = c(0, \n                                                                   y.max + y.max * 0.002 * max(nchar(x = unique(group.use[[colname]])), na.rm=TRUE) * \n                                                                     size), clip = \"off\"))\n        }\n      }\n    }\n    plot <- plot + theme(line = element_blank())\n    plots[[i]] <- plot\n  }\n  if (combine) {\n    plots <- CombinePlots(plots = plots)\n  }\n  return(plots)\n}\n",
    "created" : 1616001924224.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "964676872",
    "id" : "8A033CA2",
    "lastKnownWriteTime" : 1616001577,
    "last_content_update" : 1616001577,
    "path" : "~/DoMultiBarHeatmap/R/domultiheatmap.func.R",
    "project_path" : "R/domultiheatmap.func.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}